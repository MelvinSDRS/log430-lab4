name: POS System CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  IMAGE_NAME: pos-system-lab4

jobs:
  # Job 1: Tests et qualit√© du code
  test-and-quality:
    name: Tests & Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8
      
      - name: Set up PostgreSQL
        uses: harmon758/postgresql-action@v1
        with:
          postgresql version: '15'
          postgresql db: pos_multimagasins
          postgresql user: pos_user
          postgresql password: pos_password
      
      - name: Code quality check with flake8
        run: |
          echo "üîç Running code quality checks..."
          flake8 src/ tests/ --max-line-length=88 --exclude=__pycache__ --statistics || echo "Code quality warnings found (non-blocking)"
          echo "‚úÖ Code quality check completed"
      
      - name: Initialize test database
        env:
          DATABASE_URL: postgresql://pos_user:pos_password@localhost:5432/pos_multimagasins
        run: |
          python init_data_multimagasins.py
          echo "‚úÖ Database initialization successful"
      
      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://pos_user:pos_password@localhost:5432/pos_multimagasins
        run: |
          pytest tests/ -v --cov=src --cov-report=term-missing
          echo "‚úÖ All tests passed"

  # Job 2: Build et test Docker
  docker-build-test:
    name: Docker Build & Integration Test
    runs-on: ubuntu-latest
    needs: test-and-quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: false
          load: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test Docker image basic functionality
        run: |
          echo "Testing Docker image basic functionality..."
          docker run --rm ${{ env.IMAGE_NAME }}:latest python -c "
          import sys
          sys.path.append('/app')
          from src.domain.entities import Produit
          from decimal import Decimal
          produit = Produit(1, 'Test', Decimal('10.00'), 5, 1)
          assert produit.nom == 'Test'
          print('‚úÖ Docker image basic test passed')
          "
      
      - name: Test complete Docker architecture
        run: |
          echo "Testing complete Docker architecture with docker-compose..."
          # Start the complete architecture
          docker compose up -d
          
          # Wait for services to be healthy
          echo "Waiting for services to be healthy..."
          timeout 60 bash -c 'until docker compose ps | grep -q "healthy"; do sleep 2; done'
          
          # Check that all services are running
          docker compose ps
          
          # Test database connectivity and multi-store architecture
          docker compose exec -T pos-magasin-1 python -c "
          from src.persistence.database import get_db_session
          from src.persistence.models import CaisseModel, EntiteModel
          session = get_db_session()
          
          # Test total caisses (2 per magasin √ó 5 magasins = 10)
          caisses = session.query(CaisseModel).count()
          assert caisses >= 10, f'Expected at least 10 caisses (2 per store), got {caisses}'
          print(f'‚úÖ Found {caisses} caisses in database')
          
          # Test entit√©s (5 magasins + 1 centre logistique + 1 maison m√®re = 7)
          entites = session.query(EntiteModel).count()
          assert entites >= 7, f'Expected at least 7 entit√©s, got {entites}'
          print(f'‚úÖ Found {entites} entit√©s in multi-store architecture')
          
          session.close()
          "
          
          # Test web interface accessibility
          echo "Testing web interface..."
          timeout 30 bash -c 'until curl -f http://localhost:5000/health 2>/dev/null || curl -f http://localhost:5000/ 2>/dev/null; do echo "Waiting for web interface..."; sleep 2; done'
          echo "‚úÖ Web interface is accessible"
          
          # Run tests in Docker environment
          docker compose --profile test up --abort-on-container-exit pos-test
          
          # Cleanup
          docker compose down -v
          
          echo "‚úÖ Complete Docker architecture test passed"

  # Job 3: Publication Docker
  docker-push:
    name: Docker Push
    runs-on: ubuntu-latest
    needs: docker-build-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 4: Notification de succ√®s
  success-notification:
    name: Success Notification
    runs-on: ubuntu-latest
    needs: [test-and-quality, docker-build-test, docker-push]
    if: always() && needs.test-and-quality.result == 'success' && needs.docker-build-test.result == 'success'
    
    steps:
      - name: Success message
        run: |
          echo "üéâ CI/CD Pipeline completed successfully!"
          echo "‚úÖ Tests passed"
          echo "‚úÖ Code quality verified"
          echo "‚úÖ Docker architecture tested"
          if [[ "${{ needs.docker-push.result }}" == "success" ]]; then
            echo "‚úÖ Docker image built and pushed"
          else
            echo "‚ÑπÔ∏è Docker push skipped (not on main/master branch)"
          fi